'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="IndHungry4Food")>  _
Partial Public Class Hungry4FoodDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertStoreInfo(instance As StoreInfo)
    End Sub
  Partial Private Sub UpdateStoreInfo(instance As StoreInfo)
    End Sub
  Partial Private Sub DeleteStoreInfo(instance As StoreInfo)
    End Sub
  Partial Private Sub InsertDriverAssignment(instance As DriverAssignment)
    End Sub
  Partial Private Sub UpdateDriverAssignment(instance As DriverAssignment)
    End Sub
  Partial Private Sub DeleteDriverAssignment(instance As DriverAssignment)
    End Sub
  Partial Private Sub InsertDriverSchedule(instance As DriverSchedule)
    End Sub
  Partial Private Sub UpdateDriverSchedule(instance As DriverSchedule)
    End Sub
  Partial Private Sub DeleteDriverSchedule(instance As DriverSchedule)
    End Sub
  Partial Private Sub InsertEmployee(instance As Employee)
    End Sub
  Partial Private Sub UpdateEmployee(instance As Employee)
    End Sub
  Partial Private Sub DeleteEmployee(instance As Employee)
    End Sub
  Partial Private Sub InsertEmployeeType(instance As EmployeeType)
    End Sub
  Partial Private Sub UpdateEmployeeType(instance As EmployeeType)
    End Sub
  Partial Private Sub DeleteEmployeeType(instance As EmployeeType)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.sampleh4f.DAL.My.MySettings.Default.IndHungry4FoodConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property StoreInfos() As System.Data.Linq.Table(Of StoreInfo)
		Get
			Return Me.GetTable(Of StoreInfo)
		End Get
	End Property
	
	Public ReadOnly Property DriverAssignments() As System.Data.Linq.Table(Of DriverAssignment)
		Get
			Return Me.GetTable(Of DriverAssignment)
		End Get
	End Property
	
	Public ReadOnly Property DriverSchedules() As System.Data.Linq.Table(Of DriverSchedule)
		Get
			Return Me.GetTable(Of DriverSchedule)
		End Get
	End Property
	
	Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
		Get
			Return Me.GetTable(Of Employee)
		End Get
	End Property
	
	Public ReadOnly Property EmployeeTypes() As System.Data.Linq.Table(Of EmployeeType)
		Get
			Return Me.GetTable(Of EmployeeType)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.StoreInfo")>  _
Partial Public Class StoreInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StoreID As Long
	
	Private _BusinessName As String
	
	Private _StoreName As String
	
	Private _StoreLogoImage As String
	
	Private _StoreStrtAdd As String
	
	Private _StorePh As String
	
	Private _StoreCity As String
	
	Private _StoreState As String
	
	Private _StoreZipCd As String
	
	Private _Fax As String
	
	Private _Rating As System.Nullable(Of Decimal)
	
	Private _Reviews As System.Nullable(Of Long)
	
	Private _TimeZone_Offset As System.Nullable(Of Decimal)
	
	Private _IsOnlineOrder As System.Nullable(Of Char)
	
	Private _IsDelivery As System.Nullable(Of Char)
	
	Private _DeliveryDistance As System.Nullable(Of Decimal)
	
	Private _DlvryRate As String
	
	Private _DlvryMinOrderAmt As System.Nullable(Of Decimal)
	
	Private _DlvryEstTime As String
	
	Private _CouponCnt As System.Nullable(Of Long)
	
	Private _CashCouponPercent As String
	
	Private _CashCouponInfo As String
	
	Private _Cuisines As String
	
	Private _PriceRating As String
	
	Private _Active_Ind As System.Nullable(Of Char)
	
	Private _PopularDishes As String
	
	Private _MoreInfomation As String
	
	Private _Email As String
	
	Private _SMS As String
	
	Private _FaxUserID As String
	
	Private _FaxPassword As String
	
	Private _HasIndividualWebsite As System.Nullable(Of Boolean)
	
	Private _IndividualWebsite As String
	
	Private _DriverAssignments As EntitySet(Of DriverAssignment)
	
	Private _Employees As EntitySet(Of Employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStoreIDChanging(value As Long)
    End Sub
    Partial Private Sub OnStoreIDChanged()
    End Sub
    Partial Private Sub OnBusinessNameChanging(value As String)
    End Sub
    Partial Private Sub OnBusinessNameChanged()
    End Sub
    Partial Private Sub OnStoreNameChanging(value As String)
    End Sub
    Partial Private Sub OnStoreNameChanged()
    End Sub
    Partial Private Sub OnStoreLogoImageChanging(value As String)
    End Sub
    Partial Private Sub OnStoreLogoImageChanged()
    End Sub
    Partial Private Sub OnStoreStrtAddChanging(value As String)
    End Sub
    Partial Private Sub OnStoreStrtAddChanged()
    End Sub
    Partial Private Sub OnStorePhChanging(value As String)
    End Sub
    Partial Private Sub OnStorePhChanged()
    End Sub
    Partial Private Sub OnStoreCityChanging(value As String)
    End Sub
    Partial Private Sub OnStoreCityChanged()
    End Sub
    Partial Private Sub OnStoreStateChanging(value As String)
    End Sub
    Partial Private Sub OnStoreStateChanged()
    End Sub
    Partial Private Sub OnStoreZipCdChanging(value As String)
    End Sub
    Partial Private Sub OnStoreZipCdChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnRatingChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRatingChanged()
    End Sub
    Partial Private Sub OnReviewsChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnReviewsChanged()
    End Sub
    Partial Private Sub OnTimeZone_OffsetChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTimeZone_OffsetChanged()
    End Sub
    Partial Private Sub OnIsOnlineOrderChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnIsOnlineOrderChanged()
    End Sub
    Partial Private Sub OnIsDeliveryChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnIsDeliveryChanged()
    End Sub
    Partial Private Sub OnDeliveryDistanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDeliveryDistanceChanged()
    End Sub
    Partial Private Sub OnDlvryRateChanging(value As String)
    End Sub
    Partial Private Sub OnDlvryRateChanged()
    End Sub
    Partial Private Sub OnDlvryMinOrderAmtChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDlvryMinOrderAmtChanged()
    End Sub
    Partial Private Sub OnDlvryEstTimeChanging(value As String)
    End Sub
    Partial Private Sub OnDlvryEstTimeChanged()
    End Sub
    Partial Private Sub OnCouponCntChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCouponCntChanged()
    End Sub
    Partial Private Sub OnCashCouponPercentChanging(value As String)
    End Sub
    Partial Private Sub OnCashCouponPercentChanged()
    End Sub
    Partial Private Sub OnCashCouponInfoChanging(value As String)
    End Sub
    Partial Private Sub OnCashCouponInfoChanged()
    End Sub
    Partial Private Sub OnCuisinesChanging(value As String)
    End Sub
    Partial Private Sub OnCuisinesChanged()
    End Sub
    Partial Private Sub OnPriceRatingChanging(value As String)
    End Sub
    Partial Private Sub OnPriceRatingChanged()
    End Sub
    Partial Private Sub OnActive_IndChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnActive_IndChanged()
    End Sub
    Partial Private Sub OnPopularDishesChanging(value As String)
    End Sub
    Partial Private Sub OnPopularDishesChanged()
    End Sub
    Partial Private Sub OnMoreInfomationChanging(value As String)
    End Sub
    Partial Private Sub OnMoreInfomationChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnSMSChanging(value As String)
    End Sub
    Partial Private Sub OnSMSChanged()
    End Sub
    Partial Private Sub OnFaxUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnFaxUserIDChanged()
    End Sub
    Partial Private Sub OnFaxPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnFaxPasswordChanged()
    End Sub
    Partial Private Sub OnHasIndividualWebsiteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnHasIndividualWebsiteChanged()
    End Sub
    Partial Private Sub OnIndividualWebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnIndividualWebsiteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DriverAssignments = New EntitySet(Of DriverAssignment)(AddressOf Me.attach_DriverAssignments, AddressOf Me.detach_DriverAssignments)
		Me._Employees = New EntitySet(Of Employee)(AddressOf Me.attach_Employees, AddressOf Me.detach_Employees)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property StoreID() As Long
		Get
			Return Me._StoreID
		End Get
		Set
			If ((Me._StoreID = value)  _
						= false) Then
				Me.OnStoreIDChanging(value)
				Me.SendPropertyChanging
				Me._StoreID = value
				Me.SendPropertyChanged("StoreID")
				Me.OnStoreIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessName", DbType:="VarChar(100)")>  _
	Public Property BusinessName() As String
		Get
			Return Me._BusinessName
		End Get
		Set
			If (String.Equals(Me._BusinessName, value) = false) Then
				Me.OnBusinessNameChanging(value)
				Me.SendPropertyChanging
				Me._BusinessName = value
				Me.SendPropertyChanged("BusinessName")
				Me.OnBusinessNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreName", DbType:="VarChar(100)")>  _
	Public Property StoreName() As String
		Get
			Return Me._StoreName
		End Get
		Set
			If (String.Equals(Me._StoreName, value) = false) Then
				Me.OnStoreNameChanging(value)
				Me.SendPropertyChanging
				Me._StoreName = value
				Me.SendPropertyChanged("StoreName")
				Me.OnStoreNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreLogoImage", DbType:="VarChar(50)")>  _
	Public Property StoreLogoImage() As String
		Get
			Return Me._StoreLogoImage
		End Get
		Set
			If (String.Equals(Me._StoreLogoImage, value) = false) Then
				Me.OnStoreLogoImageChanging(value)
				Me.SendPropertyChanging
				Me._StoreLogoImage = value
				Me.SendPropertyChanged("StoreLogoImage")
				Me.OnStoreLogoImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreStrtAdd", DbType:="VarChar(100)")>  _
	Public Property StoreStrtAdd() As String
		Get
			Return Me._StoreStrtAdd
		End Get
		Set
			If (String.Equals(Me._StoreStrtAdd, value) = false) Then
				Me.OnStoreStrtAddChanging(value)
				Me.SendPropertyChanging
				Me._StoreStrtAdd = value
				Me.SendPropertyChanged("StoreStrtAdd")
				Me.OnStoreStrtAddChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StorePh", DbType:="VarChar(20)")>  _
	Public Property StorePh() As String
		Get
			Return Me._StorePh
		End Get
		Set
			If (String.Equals(Me._StorePh, value) = false) Then
				Me.OnStorePhChanging(value)
				Me.SendPropertyChanging
				Me._StorePh = value
				Me.SendPropertyChanged("StorePh")
				Me.OnStorePhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreCity", DbType:="VarChar(50)")>  _
	Public Property StoreCity() As String
		Get
			Return Me._StoreCity
		End Get
		Set
			If (String.Equals(Me._StoreCity, value) = false) Then
				Me.OnStoreCityChanging(value)
				Me.SendPropertyChanging
				Me._StoreCity = value
				Me.SendPropertyChanged("StoreCity")
				Me.OnStoreCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreState", DbType:="VarChar(2)")>  _
	Public Property StoreState() As String
		Get
			Return Me._StoreState
		End Get
		Set
			If (String.Equals(Me._StoreState, value) = false) Then
				Me.OnStoreStateChanging(value)
				Me.SendPropertyChanging
				Me._StoreState = value
				Me.SendPropertyChanged("StoreState")
				Me.OnStoreStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreZipCd", DbType:="VarChar(9)")>  _
	Public Property StoreZipCd() As String
		Get
			Return Me._StoreZipCd
		End Get
		Set
			If (String.Equals(Me._StoreZipCd, value) = false) Then
				Me.OnStoreZipCdChanging(value)
				Me.SendPropertyChanging
				Me._StoreZipCd = value
				Me.SendPropertyChanged("StoreZipCd")
				Me.OnStoreZipCdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="VarChar(20)")>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rating", DbType:="Decimal(18,2)")>  _
	Public Property Rating() As System.Nullable(Of Decimal)
		Get
			Return Me._Rating
		End Get
		Set
			If (Me._Rating.Equals(value) = false) Then
				Me.OnRatingChanging(value)
				Me.SendPropertyChanging
				Me._Rating = value
				Me.SendPropertyChanged("Rating")
				Me.OnRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reviews", DbType:="BigInt")>  _
	Public Property Reviews() As System.Nullable(Of Long)
		Get
			Return Me._Reviews
		End Get
		Set
			If (Me._Reviews.Equals(value) = false) Then
				Me.OnReviewsChanging(value)
				Me.SendPropertyChanging
				Me._Reviews = value
				Me.SendPropertyChanged("Reviews")
				Me.OnReviewsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZone_Offset", DbType:="Decimal(18,2)")>  _
	Public Property TimeZone_Offset() As System.Nullable(Of Decimal)
		Get
			Return Me._TimeZone_Offset
		End Get
		Set
			If (Me._TimeZone_Offset.Equals(value) = false) Then
				Me.OnTimeZone_OffsetChanging(value)
				Me.SendPropertyChanging
				Me._TimeZone_Offset = value
				Me.SendPropertyChanged("TimeZone_Offset")
				Me.OnTimeZone_OffsetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOnlineOrder", DbType:="Char(1)")>  _
	Public Property IsOnlineOrder() As System.Nullable(Of Char)
		Get
			Return Me._IsOnlineOrder
		End Get
		Set
			If (Me._IsOnlineOrder.Equals(value) = false) Then
				Me.OnIsOnlineOrderChanging(value)
				Me.SendPropertyChanging
				Me._IsOnlineOrder = value
				Me.SendPropertyChanged("IsOnlineOrder")
				Me.OnIsOnlineOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDelivery", DbType:="Char(1)")>  _
	Public Property IsDelivery() As System.Nullable(Of Char)
		Get
			Return Me._IsDelivery
		End Get
		Set
			If (Me._IsDelivery.Equals(value) = false) Then
				Me.OnIsDeliveryChanging(value)
				Me.SendPropertyChanging
				Me._IsDelivery = value
				Me.SendPropertyChanged("IsDelivery")
				Me.OnIsDeliveryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryDistance", DbType:="Decimal(18,2)")>  _
	Public Property DeliveryDistance() As System.Nullable(Of Decimal)
		Get
			Return Me._DeliveryDistance
		End Get
		Set
			If (Me._DeliveryDistance.Equals(value) = false) Then
				Me.OnDeliveryDistanceChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryDistance = value
				Me.SendPropertyChanged("DeliveryDistance")
				Me.OnDeliveryDistanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DlvryRate", DbType:="VarChar(50)")>  _
	Public Property DlvryRate() As String
		Get
			Return Me._DlvryRate
		End Get
		Set
			If (String.Equals(Me._DlvryRate, value) = false) Then
				Me.OnDlvryRateChanging(value)
				Me.SendPropertyChanging
				Me._DlvryRate = value
				Me.SendPropertyChanged("DlvryRate")
				Me.OnDlvryRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DlvryMinOrderAmt", DbType:="Decimal(18,2)")>  _
	Public Property DlvryMinOrderAmt() As System.Nullable(Of Decimal)
		Get
			Return Me._DlvryMinOrderAmt
		End Get
		Set
			If (Me._DlvryMinOrderAmt.Equals(value) = false) Then
				Me.OnDlvryMinOrderAmtChanging(value)
				Me.SendPropertyChanging
				Me._DlvryMinOrderAmt = value
				Me.SendPropertyChanged("DlvryMinOrderAmt")
				Me.OnDlvryMinOrderAmtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DlvryEstTime", DbType:="NChar(10)")>  _
	Public Property DlvryEstTime() As String
		Get
			Return Me._DlvryEstTime
		End Get
		Set
			If (String.Equals(Me._DlvryEstTime, value) = false) Then
				Me.OnDlvryEstTimeChanging(value)
				Me.SendPropertyChanging
				Me._DlvryEstTime = value
				Me.SendPropertyChanged("DlvryEstTime")
				Me.OnDlvryEstTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CouponCnt", DbType:="BigInt")>  _
	Public Property CouponCnt() As System.Nullable(Of Long)
		Get
			Return Me._CouponCnt
		End Get
		Set
			If (Me._CouponCnt.Equals(value) = false) Then
				Me.OnCouponCntChanging(value)
				Me.SendPropertyChanging
				Me._CouponCnt = value
				Me.SendPropertyChanged("CouponCnt")
				Me.OnCouponCntChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CashCouponPercent", DbType:="NChar(10)")>  _
	Public Property CashCouponPercent() As String
		Get
			Return Me._CashCouponPercent
		End Get
		Set
			If (String.Equals(Me._CashCouponPercent, value) = false) Then
				Me.OnCashCouponPercentChanging(value)
				Me.SendPropertyChanging
				Me._CashCouponPercent = value
				Me.SendPropertyChanged("CashCouponPercent")
				Me.OnCashCouponPercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CashCouponInfo", DbType:="VarChar(100)")>  _
	Public Property CashCouponInfo() As String
		Get
			Return Me._CashCouponInfo
		End Get
		Set
			If (String.Equals(Me._CashCouponInfo, value) = false) Then
				Me.OnCashCouponInfoChanging(value)
				Me.SendPropertyChanging
				Me._CashCouponInfo = value
				Me.SendPropertyChanged("CashCouponInfo")
				Me.OnCashCouponInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cuisines", DbType:="VarChar(200)")>  _
	Public Property Cuisines() As String
		Get
			Return Me._Cuisines
		End Get
		Set
			If (String.Equals(Me._Cuisines, value) = false) Then
				Me.OnCuisinesChanging(value)
				Me.SendPropertyChanging
				Me._Cuisines = value
				Me.SendPropertyChanged("Cuisines")
				Me.OnCuisinesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceRating", DbType:="VarChar(10)")>  _
	Public Property PriceRating() As String
		Get
			Return Me._PriceRating
		End Get
		Set
			If (String.Equals(Me._PriceRating, value) = false) Then
				Me.OnPriceRatingChanging(value)
				Me.SendPropertyChanging
				Me._PriceRating = value
				Me.SendPropertyChanged("PriceRating")
				Me.OnPriceRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active_Ind", DbType:="Char(1)")>  _
	Public Property Active_Ind() As System.Nullable(Of Char)
		Get
			Return Me._Active_Ind
		End Get
		Set
			If (Me._Active_Ind.Equals(value) = false) Then
				Me.OnActive_IndChanging(value)
				Me.SendPropertyChanging
				Me._Active_Ind = value
				Me.SendPropertyChanged("Active_Ind")
				Me.OnActive_IndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PopularDishes", DbType:="VarChar(200)")>  _
	Public Property PopularDishes() As String
		Get
			Return Me._PopularDishes
		End Get
		Set
			If (String.Equals(Me._PopularDishes, value) = false) Then
				Me.OnPopularDishesChanging(value)
				Me.SendPropertyChanging
				Me._PopularDishes = value
				Me.SendPropertyChanged("PopularDishes")
				Me.OnPopularDishesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MoreInfomation", DbType:="VarChar(250)")>  _
	Public Property MoreInfomation() As String
		Get
			Return Me._MoreInfomation
		End Get
		Set
			If (String.Equals(Me._MoreInfomation, value) = false) Then
				Me.OnMoreInfomationChanging(value)
				Me.SendPropertyChanging
				Me._MoreInfomation = value
				Me.SendPropertyChanged("MoreInfomation")
				Me.OnMoreInfomationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(200)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SMS", DbType:="VarChar(200)")>  _
	Public Property SMS() As String
		Get
			Return Me._SMS
		End Get
		Set
			If (String.Equals(Me._SMS, value) = false) Then
				Me.OnSMSChanging(value)
				Me.SendPropertyChanging
				Me._SMS = value
				Me.SendPropertyChanged("SMS")
				Me.OnSMSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxUserID", DbType:="VarChar(100)")>  _
	Public Property FaxUserID() As String
		Get
			Return Me._FaxUserID
		End Get
		Set
			If (String.Equals(Me._FaxUserID, value) = false) Then
				Me.OnFaxUserIDChanging(value)
				Me.SendPropertyChanging
				Me._FaxUserID = value
				Me.SendPropertyChanged("FaxUserID")
				Me.OnFaxUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxPassword", DbType:="VarChar(100)")>  _
	Public Property FaxPassword() As String
		Get
			Return Me._FaxPassword
		End Get
		Set
			If (String.Equals(Me._FaxPassword, value) = false) Then
				Me.OnFaxPasswordChanging(value)
				Me.SendPropertyChanging
				Me._FaxPassword = value
				Me.SendPropertyChanged("FaxPassword")
				Me.OnFaxPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HasIndividualWebsite", DbType:="Bit")>  _
	Public Property HasIndividualWebsite() As System.Nullable(Of Boolean)
		Get
			Return Me._HasIndividualWebsite
		End Get
		Set
			If (Me._HasIndividualWebsite.Equals(value) = false) Then
				Me.OnHasIndividualWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._HasIndividualWebsite = value
				Me.SendPropertyChanged("HasIndividualWebsite")
				Me.OnHasIndividualWebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndividualWebsite", DbType:="NVarChar(500)")>  _
	Public Property IndividualWebsite() As String
		Get
			Return Me._IndividualWebsite
		End Get
		Set
			If (String.Equals(Me._IndividualWebsite, value) = false) Then
				Me.OnIndividualWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._IndividualWebsite = value
				Me.SendPropertyChanged("IndividualWebsite")
				Me.OnIndividualWebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="StoreInfo_DriverAssignment", Storage:="_DriverAssignments", ThisKey:="StoreID", OtherKey:="StoreID")>  _
	Public Property DriverAssignments() As EntitySet(Of DriverAssignment)
		Get
			Return Me._DriverAssignments
		End Get
		Set
			Me._DriverAssignments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="StoreInfo_Employee", Storage:="_Employees", ThisKey:="StoreID", OtherKey:="StoreID")>  _
	Public Property Employees() As EntitySet(Of Employee)
		Get
			Return Me._Employees
		End Get
		Set
			Me._Employees.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DriverAssignments(ByVal entity As DriverAssignment)
		Me.SendPropertyChanging
		entity.StoreInfo = Me
	End Sub
	
	Private Sub detach_DriverAssignments(ByVal entity As DriverAssignment)
		Me.SendPropertyChanging
		entity.StoreInfo = Nothing
	End Sub
	
	Private Sub attach_Employees(ByVal entity As Employee)
		Me.SendPropertyChanging
		entity.StoreInfo = Me
	End Sub
	
	Private Sub detach_Employees(ByVal entity As Employee)
		Me.SendPropertyChanging
		entity.StoreInfo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DriverAssignment")>  _
Partial Public Class DriverAssignment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Long
	
	Private _SalesId As System.Nullable(Of Long)
	
	Private _StoreID As System.Nullable(Of Long)
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _Created As System.Nullable(Of Date)
	
	Private _Modified As System.Nullable(Of Date)
	
	Private _DriverSchedules As EntitySet(Of DriverSchedule)
	
	Private _StoreInfo As EntityRef(Of StoreInfo)
	
	Private _Employee As EntityRef(Of Employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Long)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSalesIdChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSalesIdChanged()
    End Sub
    Partial Private Sub OnStoreIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnStoreIDChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DriverSchedules = New EntitySet(Of DriverSchedule)(AddressOf Me.attach_DriverSchedules, AddressOf Me.detach_DriverSchedules)
		Me._StoreInfo = CType(Nothing, EntityRef(Of StoreInfo))
		Me._Employee = CType(Nothing, EntityRef(Of Employee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Long
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesId", DbType:="BigInt")>  _
	Public Property SalesId() As System.Nullable(Of Long)
		Get
			Return Me._SalesId
		End Get
		Set
			If (Me._SalesId.Equals(value) = false) Then
				If Me._Employee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSalesIdChanging(value)
				Me.SendPropertyChanging
				Me._SalesId = value
				Me.SendPropertyChanged("SalesId")
				Me.OnSalesIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreID", DbType:="BigInt")>  _
	Public Property StoreID() As System.Nullable(Of Long)
		Get
			Return Me._StoreID
		End Get
		Set
			If (Me._StoreID.Equals(value) = false) Then
				If Me._StoreInfo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStoreIDChanging(value)
				Me.SendPropertyChanging
				Me._StoreID = value
				Me.SendPropertyChanged("StoreID")
				Me.OnStoreIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime")>  _
	Public Property Created() As System.Nullable(Of Date)
		Get
			Return Me._Created
		End Get
		Set
			If (Me._Created.Equals(value) = false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Modified", DbType:="DateTime")>  _
	Public Property Modified() As System.Nullable(Of Date)
		Get
			Return Me._Modified
		End Get
		Set
			If (Me._Modified.Equals(value) = false) Then
				Me.OnModifiedChanging(value)
				Me.SendPropertyChanging
				Me._Modified = value
				Me.SendPropertyChanged("Modified")
				Me.OnModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DriverAssignment_DriverSchedule", Storage:="_DriverSchedules", ThisKey:="Id", OtherKey:="DriverAssignID")>  _
	Public Property DriverSchedules() As EntitySet(Of DriverSchedule)
		Get
			Return Me._DriverSchedules
		End Get
		Set
			Me._DriverSchedules.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="StoreInfo_DriverAssignment", Storage:="_StoreInfo", ThisKey:="StoreID", OtherKey:="StoreID", IsForeignKey:=true)>  _
	Public Property StoreInfo() As StoreInfo
		Get
			Return Me._StoreInfo.Entity
		End Get
		Set
			Dim previousValue As StoreInfo = Me._StoreInfo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._StoreInfo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._StoreInfo.Entity = Nothing
					previousValue.DriverAssignments.Remove(Me)
				End If
				Me._StoreInfo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DriverAssignments.Add(Me)
					Me._StoreID = value.StoreID
				Else
					Me._StoreID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("StoreInfo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_DriverAssignment", Storage:="_Employee", ThisKey:="SalesId", OtherKey:="SalesId", IsForeignKey:=true)>  _
	Public Property Employee() As Employee
		Get
			Return Me._Employee.Entity
		End Get
		Set
			Dim previousValue As Employee = Me._Employee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Employee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Employee.Entity = Nothing
					previousValue.DriverAssignments.Remove(Me)
				End If
				Me._Employee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DriverAssignments.Add(Me)
					Me._SalesId = value.SalesId
				Else
					Me._SalesId = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Employee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DriverSchedules(ByVal entity As DriverSchedule)
		Me.SendPropertyChanging
		entity.DriverAssignment = Me
	End Sub
	
	Private Sub detach_DriverSchedules(ByVal entity As DriverSchedule)
		Me.SendPropertyChanging
		entity.DriverAssignment = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DriverSchedule")>  _
Partial Public Class DriverSchedule
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Long
	
	Private _DriverAssignID As System.Nullable(Of Long)
	
	Private _Day As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _Created As System.Nullable(Of Date)
	
	Private _Modified As System.Nullable(Of Date)
	
	Private _DriverAssignment As EntityRef(Of DriverAssignment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Long)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDriverAssignIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDriverAssignIDChanged()
    End Sub
    Partial Private Sub OnDayChanging(value As String)
    End Sub
    Partial Private Sub OnDayChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DriverAssignment = CType(Nothing, EntityRef(Of DriverAssignment))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Long
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverAssignID", DbType:="BigInt")>  _
	Public Property DriverAssignID() As System.Nullable(Of Long)
		Get
			Return Me._DriverAssignID
		End Get
		Set
			If (Me._DriverAssignID.Equals(value) = false) Then
				If Me._DriverAssignment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDriverAssignIDChanging(value)
				Me.SendPropertyChanging
				Me._DriverAssignID = value
				Me.SendPropertyChanged("DriverAssignID")
				Me.OnDriverAssignIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Day", DbType:="VarChar(10)")>  _
	Public Property Day() As String
		Get
			Return Me._Day
		End Get
		Set
			If (String.Equals(Me._Day, value) = false) Then
				Me.OnDayChanging(value)
				Me.SendPropertyChanging
				Me._Day = value
				Me.SendPropertyChanged("Day")
				Me.OnDayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime")>  _
	Public Property Created() As System.Nullable(Of Date)
		Get
			Return Me._Created
		End Get
		Set
			If (Me._Created.Equals(value) = false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Modified", DbType:="DateTime")>  _
	Public Property Modified() As System.Nullable(Of Date)
		Get
			Return Me._Modified
		End Get
		Set
			If (Me._Modified.Equals(value) = false) Then
				Me.OnModifiedChanging(value)
				Me.SendPropertyChanging
				Me._Modified = value
				Me.SendPropertyChanged("Modified")
				Me.OnModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DriverAssignment_DriverSchedule", Storage:="_DriverAssignment", ThisKey:="DriverAssignID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property DriverAssignment() As DriverAssignment
		Get
			Return Me._DriverAssignment.Entity
		End Get
		Set
			Dim previousValue As DriverAssignment = Me._DriverAssignment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DriverAssignment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DriverAssignment.Entity = Nothing
					previousValue.DriverSchedules.Remove(Me)
				End If
				Me._DriverAssignment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DriverSchedules.Add(Me)
					Me._DriverAssignID = value.Id
				Else
					Me._DriverAssignID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("DriverAssignment")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Employee")>  _
Partial Public Class Employee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SalesId As Long
	
	Private _FirstName As String
	
	Private _MiddleName As String
	
	Private _LastName As String
	
	Private _StreetAdd As String
	
	Private _City As String
	
	Private _State As String
	
	Private _ZipCode As String
	
	Private _Ph As String
	
	Private _Ssn As String
	
	Private _DrvPass As String
	
	Private _PnchInPwd As String
	
	Private _EmployeeTypeId As System.Nullable(Of Long)
	
	Private _StoreID As System.Nullable(Of Long)
	
	Private _Email As String
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _DriverAssignments As EntitySet(Of DriverAssignment)
	
	Private _StoreInfo As EntityRef(Of StoreInfo)
	
	Private _EmployeeType As EntityRef(Of EmployeeType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSalesIdChanging(value As Long)
    End Sub
    Partial Private Sub OnSalesIdChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnStreetAddChanging(value As String)
    End Sub
    Partial Private Sub OnStreetAddChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnZipCodeChanging(value As String)
    End Sub
    Partial Private Sub OnZipCodeChanged()
    End Sub
    Partial Private Sub OnPhChanging(value As String)
    End Sub
    Partial Private Sub OnPhChanged()
    End Sub
    Partial Private Sub OnSsnChanging(value As String)
    End Sub
    Partial Private Sub OnSsnChanged()
    End Sub
    Partial Private Sub OnDrvPassChanging(value As String)
    End Sub
    Partial Private Sub OnDrvPassChanged()
    End Sub
    Partial Private Sub OnPnchInPwdChanging(value As String)
    End Sub
    Partial Private Sub OnPnchInPwdChanged()
    End Sub
    Partial Private Sub OnEmployeeTypeIdChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnEmployeeTypeIdChanged()
    End Sub
    Partial Private Sub OnStoreIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnStoreIDChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DriverAssignments = New EntitySet(Of DriverAssignment)(AddressOf Me.attach_DriverAssignments, AddressOf Me.detach_DriverAssignments)
		Me._StoreInfo = CType(Nothing, EntityRef(Of StoreInfo))
		Me._EmployeeType = CType(Nothing, EntityRef(Of EmployeeType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesId", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SalesId() As Long
		Get
			Return Me._SalesId
		End Get
		Set
			If ((Me._SalesId = value)  _
						= false) Then
				Me.OnSalesIdChanging(value)
				Me.SendPropertyChanging
				Me._SalesId = value
				Me.SendPropertyChanged("SalesId")
				Me.OnSalesIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="VarChar(50)")>  _
	Public Property MiddleName() As String
		Get
			Return Me._MiddleName
		End Get
		Set
			If (String.Equals(Me._MiddleName, value) = false) Then
				Me.OnMiddleNameChanging(value)
				Me.SendPropertyChanging
				Me._MiddleName = value
				Me.SendPropertyChanged("MiddleName")
				Me.OnMiddleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StreetAdd", DbType:="VarChar(60)")>  _
	Public Property StreetAdd() As String
		Get
			Return Me._StreetAdd
		End Get
		Set
			If (String.Equals(Me._StreetAdd, value) = false) Then
				Me.OnStreetAddChanging(value)
				Me.SendPropertyChanging
				Me._StreetAdd = value
				Me.SendPropertyChanged("StreetAdd")
				Me.OnStreetAddChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="VarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZipCode", DbType:="VarChar(9)")>  _
	Public Property ZipCode() As String
		Get
			Return Me._ZipCode
		End Get
		Set
			If (String.Equals(Me._ZipCode, value) = false) Then
				Me.OnZipCodeChanging(value)
				Me.SendPropertyChanging
				Me._ZipCode = value
				Me.SendPropertyChanged("ZipCode")
				Me.OnZipCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ph", DbType:="VarChar(20)")>  _
	Public Property Ph() As String
		Get
			Return Me._Ph
		End Get
		Set
			If (String.Equals(Me._Ph, value) = false) Then
				Me.OnPhChanging(value)
				Me.SendPropertyChanging
				Me._Ph = value
				Me.SendPropertyChanged("Ph")
				Me.OnPhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ssn", DbType:="VarChar(9)")>  _
	Public Property Ssn() As String
		Get
			Return Me._Ssn
		End Get
		Set
			If (String.Equals(Me._Ssn, value) = false) Then
				Me.OnSsnChanging(value)
				Me.SendPropertyChanging
				Me._Ssn = value
				Me.SendPropertyChanged("Ssn")
				Me.OnSsnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DrvPass", DbType:="VarChar(50)")>  _
	Public Property DrvPass() As String
		Get
			Return Me._DrvPass
		End Get
		Set
			If (String.Equals(Me._DrvPass, value) = false) Then
				Me.OnDrvPassChanging(value)
				Me.SendPropertyChanging
				Me._DrvPass = value
				Me.SendPropertyChanged("DrvPass")
				Me.OnDrvPassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PnchInPwd", DbType:="VarChar(16)")>  _
	Public Property PnchInPwd() As String
		Get
			Return Me._PnchInPwd
		End Get
		Set
			If (String.Equals(Me._PnchInPwd, value) = false) Then
				Me.OnPnchInPwdChanging(value)
				Me.SendPropertyChanging
				Me._PnchInPwd = value
				Me.SendPropertyChanged("PnchInPwd")
				Me.OnPnchInPwdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeTypeId", DbType:="BigInt")>  _
	Public Property EmployeeTypeId() As System.Nullable(Of Long)
		Get
			Return Me._EmployeeTypeId
		End Get
		Set
			If (Me._EmployeeTypeId.Equals(value) = false) Then
				If Me._EmployeeType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeTypeId = value
				Me.SendPropertyChanged("EmployeeTypeId")
				Me.OnEmployeeTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreID", DbType:="BigInt")>  _
	Public Property StoreID() As System.Nullable(Of Long)
		Get
			Return Me._StoreID
		End Get
		Set
			If (Me._StoreID.Equals(value) = false) Then
				If Me._StoreInfo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStoreIDChanging(value)
				Me.SendPropertyChanging
				Me._StoreID = value
				Me.SendPropertyChanged("StoreID")
				Me.OnStoreIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_DriverAssignment", Storage:="_DriverAssignments", ThisKey:="SalesId", OtherKey:="SalesId")>  _
	Public Property DriverAssignments() As EntitySet(Of DriverAssignment)
		Get
			Return Me._DriverAssignments
		End Get
		Set
			Me._DriverAssignments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="StoreInfo_Employee", Storage:="_StoreInfo", ThisKey:="StoreID", OtherKey:="StoreID", IsForeignKey:=true)>  _
	Public Property StoreInfo() As StoreInfo
		Get
			Return Me._StoreInfo.Entity
		End Get
		Set
			Dim previousValue As StoreInfo = Me._StoreInfo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._StoreInfo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._StoreInfo.Entity = Nothing
					previousValue.Employees.Remove(Me)
				End If
				Me._StoreInfo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Employees.Add(Me)
					Me._StoreID = value.StoreID
				Else
					Me._StoreID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("StoreInfo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EmployeeType_Employee", Storage:="_EmployeeType", ThisKey:="EmployeeTypeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property EmployeeType() As EmployeeType
		Get
			Return Me._EmployeeType.Entity
		End Get
		Set
			Dim previousValue As EmployeeType = Me._EmployeeType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EmployeeType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EmployeeType.Entity = Nothing
					previousValue.Employees.Remove(Me)
				End If
				Me._EmployeeType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Employees.Add(Me)
					Me._EmployeeTypeId = value.Id
				Else
					Me._EmployeeTypeId = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EmployeeType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DriverAssignments(ByVal entity As DriverAssignment)
		Me.SendPropertyChanging
		entity.Employee = Me
	End Sub
	
	Private Sub detach_DriverAssignments(ByVal entity As DriverAssignment)
		Me.SendPropertyChanging
		entity.Employee = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EmployeeType")>  _
Partial Public Class EmployeeType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Long
	
	Private _Name As String
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _Employees As EntitySet(Of Employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Long)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Employees = New EntitySet(Of Employee)(AddressOf Me.attach_Employees, AddressOf Me.detach_Employees)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Long
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EmployeeType_Employee", Storage:="_Employees", ThisKey:="Id", OtherKey:="EmployeeTypeId")>  _
	Public Property Employees() As EntitySet(Of Employee)
		Get
			Return Me._Employees
		End Get
		Set
			Me._Employees.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Employees(ByVal entity As Employee)
		Me.SendPropertyChanging
		entity.EmployeeType = Me
	End Sub
	
	Private Sub detach_Employees(ByVal entity As Employee)
		Me.SendPropertyChanging
		entity.EmployeeType = Nothing
	End Sub
End Class
